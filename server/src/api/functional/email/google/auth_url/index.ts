/**
 * @packageDocumentation
 * @module api.functional.email.google.auth_url
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
import type { IConnection } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";

/**
 * Google OAuth: 인증 URL 발급
 * @controller EmailController.authUrl
 * @path GET /email/google/auth-url
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function authUrl(
  connection: IConnection,
): Promise<authUrl.Output> {
  return true === connection.simulate
    ? authUrl.simulate(connection)
    : PlainFetcher.fetch(connection, {
        ...authUrl.METADATA,
        template: authUrl.METADATA.path,
        path: authUrl.path(),
      });
}
export namespace authUrl {
  export type Output = { url: string };

  export const METADATA = {
    method: "GET",
    path: "/email/google/auth-url",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 200,
  } as const;

  export const path = () => "/email/google/auth-url";
  export const random = (): { url: string } => typia.random<{ url: string }>();
  export const simulate = (_connection: IConnection): Output => {
    return random();
  };
}
