/**
 * @packageDocumentation
 * @module api.functional.email.google
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
import type { IConnection } from "@nestia/fetcher";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";

export * as auth_url from "./auth_url";

/**
 * Google OAuth: 콜백 (code -> refresh token 교환 및 저장)
 * @controller EmailController.callback
 * @path GET /email/google/callback
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function callback(
  connection: IConnection,
  code?: string,
): Promise<callback.Output> {
  return true === connection.simulate
    ? callback.simulate(connection, code)
    : PlainFetcher.fetch(connection, {
        ...callback.METADATA,
        template: callback.METADATA.path,
        path: callback.path(code),
      });
}
export namespace callback {
  export type Output = { saved: boolean; hasRefreshToken: boolean };

  export const METADATA = {
    method: "GET",
    path: "/email/google/callback",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 200,
  } as const;

  export const path = (code?: string) => {
    const variables: URLSearchParams = new URLSearchParams();
    for (const [key, value] of Object.entries({
      code: code,
    } as any))
      if (undefined === value) continue;
      else if (Array.isArray(value))
        value.forEach((elem: any) => variables.append(key, String(elem)));
      else variables.set(key, String(value));
    const location: string = "/email/google/callback";
    return 0 === variables.size
      ? location
      : `${location}?${variables.toString()}`;
  };
  export const random = (): { saved: boolean; hasRefreshToken: boolean } =>
    typia.random<{ saved: boolean; hasRefreshToken: boolean }>();
  export const simulate = (connection: IConnection, code?: string): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: path(code),
      contentType: "application/json",
    });
    assert.query(() => typia.assert(code));
    return random();
  };
}
